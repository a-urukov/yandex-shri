block b-content-page, mod pageId tasks {
			content: [
				{
					elem: 'header',
					content: 'Технические задания'
				},
				{
					elem: 'content',
					content: [
						{
							block: 'b-questions',
							js: true,
							mods: { mode: 'blocks' },
							content: [
								{
									elem: 'question',
									content: [
										{
											elem: 'question-header',											
											title: 'Вопрос №1'
										},
										{
											elem: 'question-сontent',
											content: 'Перечислите известные вам инструменты и приёмы для отладки кода в разных браузерах. '
										}									
									]
								},
								{
									elem: 'answer',
									content: [
										{
											elem: 'paragraph',
											content: 'Для отладки кода в браузеров существуют следующие инструменты: <br />  
- WebInspector для Safari и Chrome <br />
- Firebug для Firefox <br />
- DeveloperTools для IE '
										},
										{
											elem: 'paragraph',
											content: 'Все перечисленные инструменты имеют схожий функционал. Основные возможности данных инструментальных средств опишу на примере WebInspector: <br />
1) Просмотр и редактирование DOM модели и css <br />
2) Просмотр Cookies и LocalStorage <br />
3) Инструмент, позволяющий определить время загрузки и объем каждого файла страницы <br />
4) Удобный инструмент отладки скриптов (позволяет расставлять брейкпойнты,  выполнять трассировку кода, просматривать значение переменных и стека) <br /> 
5) Профилировщик <br />
6) Консоль'
										},
										{
											elem: 'paragraph',
											content: 'К основным приемам отладки относятся: <br />
1) Вывод диагностических сообщений с использованием alert() и console.log() <br />
2) Трассировка кода с использованием точек останова (breakpoint), при этом имеет смысл пошагово выполнить скрипт, посмотреть значения переменных<br />
3) Выполнение отдельных фрагментов скрипта в консоли <br />
4) Использование watch expression обычно в комбинации с другими пунктами'
										}
									]
								},
								{
									elem: 'question',
									content: [
										{
											elem: 'question-header',
											title: 'Вопрос №2'
										},
										{
											elem: 'question-сontent',
											content: 'Опишите своими словами, что происходит в браузерах при клике на ссылку yandex.ru (полнота ответа – на ваше усмотрение).'
										}									
									]
								},
								{
									elem: 'answer',
									content: [
										{
											elem: 'paragraph',
											content: '1) Браузер обращается к DNS для определения ip адреса веб-сервера <br />
2) Устанавливает соединение на 80 порту<br />
3) Формирует и отправляет GET HTTP запрос <br />
4) Балансировщик нагрузки определяет наименее загруженный FrontEnd сервер <br />
5) FrontEnd сервер запрашивает BackEnd сервер <br />
6) BackEnd сервер формирует запросы к специализированным сервисам и СУБД и возвращает ответ FrontEnd <br />
7) На основе ответа BackEnd и кэшируемых данных FrontEnd гененирует разметку и скрипты и отправляет клиенту по HTTP <br />'
										}
									]							
								},
								{
									elem: 'question',
									content: [
										{
											elem: 'question-header',
											title: 'Вопрос №3'
										},
										{
											elem: 'question-сontent',
											content: 'Предположим, что мы представляем автосалон по продаже японских и немецких автомобилей. У нас есть базовые классы и примеры их использования. Допишите недостающий код.'
										}									
									]
								},
								{
									elem: 'answer',
									content: [
										{
											block: 'b-code-segment',											
											code: '/**
 * Создает экземпляр Машины
 * @this {Car}
 * @param {string} manufacturer Производитель
 * @param {string} model Модель
 * @param {number} year Год производство
 * если конструктор вызывается без указания текущего года, то подставлять текущий
 */

function Car(manufacturer, model, year) {

    this.manufacturer = manufacturer;
    this.model = model;
    this.year = year;
    if (!year) {
        this.year = (new Date()).getFullYear();
    }
    else {
        this.year = year
    }
}

// Методы вывода информации о машине: 
// console.log("Car: " + bmw); // Car: BMW X5 2010
// console.log(bmw.getInfo()); // BMW X5 2010
// console.log(bmw.getDetailedInfo()); // Производитель: BMW. Модель: X5. Год: 2010

Car.prototype.getInfo = function () {
    return this.manufacturer + " " + this.model + " " + this.year;
}

Car.prototype.getDetailedInfo = function () {
    return "Производитель: " + this.manufacturer + ". Модель: " + this.model + ". Год: " + this.year;
}

Car.prototype.toString = function () { return this.getInfo() }
  
var bmw = new Car("BMW", "X5", 2010),
    audi = new Car("Audi", "Q5", 2012),
    toyota = new Car("Toyota", "Camry");
  
/**
 * Создает экземпляр Автосалона
 * @this {CarDealer}
 * @param {string} name Название автосалона
 */
function CarDealer(name) {
    this.name = name;
    this.cars = [];
}

var yandex = new CarDealer("Яндекс.Авто");

// метод добавления машин в автосалон. Предусмотреть возможность добавления одной машины, нескольких машин.
CarDealer.prototype.add = function(/*...*/) {
  	for (var i = 0; i < arguments.length; i++) {
    	this.cars.push(arguments[i]);
	}
	
	return this;
}
  
yandex
	.add(toyota)
    .add(bmw, audi);
    
var JPY_COURSES = 98,
	RUB_COURSES = 40;

/**
 * Установить цену на машину
 * @param {string} car идентификатор машины
 * @param {string} price стоимость
 */
// идентификатор машины составляется следующим образом "производитель модель год"
// стоимость машины может быть задана в двух валютах: йена и евро.
CarDealer.prototype.setPrice = function (car, price) {
	var carObj = null;
	
  	for (var i = 0; i < this.cars.length; i++) {
    	if (this.cars[i].toString() == car) {
    		carObj = this.cars[i];    		
    		break;	
    	}		
	}
	
	if (carObj == null)	{
		
		return this;
	}
	
	if (price.charAt(0) == "€") {
		carObj.price = price.substring(1, price.length);
	}
	else if (price.charAt(0) == "¥") {
		carObj.price = Math.floor(price.substring(1, price.length) / JPY_COURSES);
	}
	else {
		carObj.price = null;
	} 
	
	return this;
}

yandex
    .setPrice("BMW X5 2010", "€2000")
    .setPrice("Audi Q5 2012", "€3000")
    .setPrice("Toyota Camry 2012", "¥3000"); 

// возвращает страну производитель
function getCountry(car) {
    switch (car.manufacturer.toLowerCase()) {
        case "bmw":
        case "audi":
            return "Germany";
        case "toyota":
            return "Japan";
    }
}

//  вывод списка автомобилей в продаже
CarDealer.prototype.list = function () {
	var resultStr = "";
	
	for (var i = 0; i < this.cars.length; i++) {
    	resultStr += this.cars[i].toString() + ", ";
	}
	
	return resultStr.substring(0, resultStr.length - 2);
}

// вывод списка автомобилей в продаже, с фильтрацией по стране производителю
CarDealer.prototype.listByCountry = function (country) {
	var resultStr = "";
	
	for (var i = 0; i < this.cars.length; i++) {
		if (getCountry(this.cars[i]) == country){
			resultStr += this.cars[i].toString() + ", ";	
		}    	
	}
	
	return resultStr.substring(0, resultStr.length - 2);
}

//  вывод списка автомобилей в продаже
CarDealer.prototype.listWithPrice = function () {
	var resultStr = "";
	
	for (var i = 0; i < this.cars.length; i++) {
    	resultStr += this.cars[i].toString() + " - " + this.cars[i].price * RUB_COURSES + " руб., ";
	}
	
	return resultStr.substring(0, resultStr.length - 2);
}

yandex.list(); //BMW X5 2010, Audi Q5 2012, Toyota Camry 2012
yandex.listByCountry("Germany"); //BMW X5 2010, Audi Q5 2012
yandex.listWithPrice(); '											
										
										}
									]							
								},
								{
									elem: 'question',
									content: [
										{
											elem: 'question-header',
											title: 'Вопрос №4'
										},
										{
											elem: 'question-сontent',
											content: 'Найдите все текстовые файлы (*.txt), в имени которых содержится «yandex», а в содержимом — «школа фронтенд-разработки». (предполагается работа с командной строкой)'
										}									
									]
								},
								{
									elem: 'answer',
									content: [
										{
											block: 'b-code-segment',											
											code: "#!/bin/bash

if [ -n '$1' ]
then
	catalog=$1
else
	catalog='.'
fi

grep -l 'школа фронтенд-разработки' ${catalog}/*yandex*.txt"
										}
									]							
								},
								{
									elem: 'question',
									content: [
										{
											elem: 'question-header',
											title: 'Вопрос №5'
										},
										{
											elem: 'question-сontent',
											content: 'Дана программа, реализованная одновременно на Bash, Python и Perl. Программа принимает произвольное количество аргументов и печатает их количество. Нужно добавить опцию -v для verbose-режима, в котором дополнительно выводится значение каждого из аргументов.'
										}									
									]
								},
								{
									elem: 'answer',
									content: [
										{
											block: 'b-code-segment',
											code: "#!/usr/bin/env bash
usage() {
cat << EOF
Usage: printargs.sh [OPTIONS] [ARGUMENTS]
  Print the number of arguments.

OPTIONS:
  -h      print help message
  -m MSG  custom message
  -v	  verbose mode      

Examples:
  printargs.sh a b c
  printargs.sh -m 'Arguments count: ' a b c
  printargs.sh -h
  printargs.sh -v
  printargs.sh -v -m 'Print arguments in verbose mode: ' a b c
  printargs.sh -m 'Print arguments in verbose mode: ' -v  a b c

EOF
}

ISVERBMODE=0;

while getopts “hvm:” OPTION
do
    case $OPTION in
        h)
            usage
            exit 1;;            	
	v)
	    ISVERBMODE=1;;	    
	m)
            MESSAGE=$OPTARG 
    esac
done

shift $(($OPTIND - 1))

COUNT=0

if [[ '$MESSAGE' != '' ]]; then
    echo $MESSAGE
fi

for ARG in $@; do

    let COUNT+=1

    if [[ '$ISVERBMODE' -ne 0 ]]; then
	echo 'Argument #' $COUNT ': ' $ARG
    fi

done

echo $COUNT"
										},
																				{
											block: 'b-code-segment',
											js: true,
											code: "#!/usr/bin/env python

import argparse

parser = argparse.ArgumentParser(description='Print the number of arguments.')
parser.add_argument('arguments', metavar='ARG', type=str, nargs='*', help='some arguments')
parser.add_argument('-m', dest='message', default='', help='custom message')
# TODO: add '-v' option for verbose mode

args = parser.parse_args()

count = 0

for a in args.arguments:
    # TODO: add '-v' option for verbose mode
    # and print each argument
    count += 1

if args.message != '':
    print(args.message)

print(count)"
										}
									]							
								},
								{
									elem: 'question',
									content: [
										{
											elem: 'question-header',
											title: 'Вопрос №6'
										},
										{
											elem: 'question-сontent',
											content: 'Расскажите, в каком объёме и при каких обстоятельствах вы изучали следующие темы: языки программирования (императивные/декларативные, разные системы типов), структуры (классы, структуры данных, примитивные типы), парадигмы (события, ООП, параллельность/асинхронность, кеширование), алгоритмы (парсинг, сортировка, поиск), паттерны.'
										}									
									]
								},
								{
									elem: 'answer',
									content: [
										{
											elem: 'paragraph',
											content: 'Программирование стало моим увлечением более 9 лет назад, а со временем переросло в профессию и настоящее призвание. <br /> 
											В 2005 году я занял второе место в областной олимпиаде по программированию среди техникумов. Помимо этого во время обучения в техникуме я разработал ПО тарификации преподавателей и составления учебных планов.<br />											
											В 2008 году участвовал в конкурсе Imagine Cup от Microsoft. <br />
											С 2009-2010 года я руководил разработкой программного комплекса "Аттестация труда сотрудников" для Института Безопасности Труда. <br />
											В 2010 году участвовал в доработке системы "Спецделопроизводство" для Федерального агентсва по финансовому мониторингу. <br />
											C 2011 года я руководитель стартап-проекта AirPlans'											
										}
									]							
								}
								
							]
						}
					]
				}				
			]	
}